"""
This module tests the generic anti-block driver
"""
import unittest

from antiblock_drivers import AntiblockDriver

class AntiblockTest(unittest.TestCase):
    """
    Testing routines for the anti-block driver.
    """

    def test_antiblock_invalid_parameters(self):
        """
        Tests if the antiblock module raises the correct exceptions when
        invalid parameter values are set.
        """

        # User-agent rotation parameters
        self.assertRaises(ValueError, AntiblockDriver, {
            'rotate_user_agent_enabled': True,
            'user_agents': 'Mozilla'
        })
        self.assertRaises(TypeError, AntiblockDriver, {
            'rotate_user_agent_enabled': True,
            'user_agents': ['Mozilla'],
            'min_user_agent_usage': -1
        })
        self.assertRaises(TypeError, AntiblockDriver, {
            'rotate_user_agent_enabled': True,
            'user_agents': ['Mozilla'],
            'min_user_agent_usage': 1,
            'max_user_agent_usage': 'Test'
        })
        self.assertRaises(ValueError, AntiblockDriver, {
            'rotate_user_agent_enabled': True,
            'user_agents': ['Mozilla'],
            'min_user_agent_usage': 10,
            'max_user_agent_usage': 5
        })

        # Delay parameters
        self.assertRaises(ValueError, AntiblockDriver, {
            'download_delay': -10,
        })
        self.assertRaises(ValueError, AntiblockDriver, {
            'autothrottle_enabled': True,
            'autothrottle_start_delay': -10,
        })
        self.assertRaises(ValueError, AntiblockDriver, {
            'autothrottle_enabled': True,
            'autothrottle_start_delay': 10,
            'autothrottle_max_delay': 'Test',
        })

        # IP-rotation parameters
        self.assertRaises(ValueError, AntiblockDriver, {
            'iprotator_enabled': True,
            'iprotator_type': 'test'
        })
        self.assertRaises(ValueError, AntiblockDriver, {
            'iprotator_enabled': True,
            'iprotator_type': 'proxy',
            'iprotator_proxy_list': { 'test': 0 }
        })

        # Cookie parameters
        self.assertRaises(ValueError, AntiblockDriver, {
            'insert_cookies': True,
            'cookies': { 'test': 0 }
        })


    def test_antiblock_generate_delay(self):
        """
        Tests the delay values generated by the fixed, random and autothrottle
        methods.
        """
        antiblock = AntiblockDriver({
            'download_delay' : 15,
            'download_delay_randomize': False
        })
        antiblock._generate_next_delay()
        self.assertEqual(antiblock.current_delay, 15)

        antiblock = AntiblockDriver({
            'download_delay' : 15
        })
        antiblock._generate_next_delay()
        self.assertTrue(7.5 <= antiblock.current_delay <= 22.5)

        antiblock = AntiblockDriver({
            'autothrottle_enabled': True,
            'autothrottle_start_delay': 10,
            'autothrottle_max_delay': 15
        })
        antiblock._generate_next_delay()
        self.assertEqual(antiblock.current_delay, 10)
        antiblock.time_last_request = 0
        antiblock._generate_next_delay(15)
        # Check for almost-equality (avoid floating point imprecision errors)
        self.assertTrue(12.49 <= antiblock.current_delay <= 12.51)
        antiblock._generate_next_delay(20)
        self.assertEqual(antiblock.current_delay, 15)


    def test_antiblock_user_agent_rotation(self):
        """
        Tests the user-agent rotation
        """
        antiblock = AntiblockDriver({
            'rotate_user_agent_enabled' : True,
            'user_agents': ['A', 'B', 'C'],
            'min_user_agent_usage': 3,
            'max_user_agent_usage': 3
        })
        result = [antiblock._get_current_user_agent() for x in range(10)]
        expected = ['A', 'A', 'A', 'B', 'B', 'B', 'C', 'C', 'C', 'A']
        self.assertEqual(result, expected)


    def test_antiblock_proxies(self):
        """
        Tests the rotation of supplied proxies
        """
        antiblock = AntiblockDriver({
            'iprotator_enabled': True,
            'iprotator_type' : 'proxy',
            'iprotator_proxy_list': ['A', 'B', 'C'],
        })
        result = [antiblock._generate_proxies()['http'] for _ in range(10)]
        expected = ['A', 'B', 'C', 'A', 'B', 'C', 'A', 'B', 'C', 'A']
        self.assertEqual(result, expected)

        antiblock = AntiblockDriver({
            'iprotator_enabled': True,
            'iprotator_type' : 'proxy',
            'iprotator_proxy_list': ['A', 'B', 'C'],
        })
        result = [antiblock._generate_proxies()['https'] for _ in range(10)]
        self.assertEqual(result, expected)

if __name__ == '__main__':
    unittest.main()
